
{ :Linköping a :City ; 
             :in :Sweden . } :source :nyt .
 Q/E?
{ :Linköping a :City . } :source :nyt . 

import subject graph dataset

@base <http://dydra.com/> .
@prefix : <http://example.org/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
 { :Linköping a :City ; :in :Sweden . } :source :nyt .

<http://example.org/Linköping> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/City> _:graph-asserted-19 .
<http://example.org/Linköping> <http://example.org/in> <http://example.org/Sweden> _:graph-asserted-19 .
<urn:dydra:default> <http://nngraph.org/asserts> _:graph-asserted-19 <http://nngraph.org/embeddings> .
_:graph-asserted-19 <http://example.org/source> <http://example.org/nyt> .

subject graph query

prefix : <http://example.org/> 
prefix nng: <http://nngraph.org/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
ask
where {
  { :Linköping a :City . } :source :nyt .
}

(ask (bgp (triple _:nodeFORMULA-29
                  <http://example.org/source>
                  <http://example.org/nyt>)
          (bgp (graph _:nodeFORMULA-29)
               (triple <http://example.org/Linköping> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/City>))))

{ "head": {}, "boolean": true }

prefix : <http://example.org/> 
prefix nng: <http://nngraph.org/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
ask
where {
  { :Linköping a :City ; :in :Sweden . } :source :nyt .
}

(ask (bgp (triple _:nodeFORMULA-30
                  <http://example.org/source>
                  <http://example.org/nyt>)
          (bgp (graph _:nodeFORMULA-30)
               (triple <http://example.org/Linköping> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/City>)
               (triple <http://example.org/Linköping> <http://example.org/in> <http://example.org/Sweden>))))

{ "head": {}, "boolean": true }

embedded graph query

prefix : <http://example.org/> 
prefix nng: <http://nngraph.org/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
ask
where {
  { :Linköping a :City ; :in :Sweden . } .
}

(ask (bgp (triple <http://example.org/Linköping> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/City>)
          (triple <http://example.org/Linköping> <http://example.org/in> <http://example.org/Sweden>)))

{ "head": {}, "boolean": true }

another embedded graph query

prefix : <http://example.org/> 
prefix nng: <http://nngraph.org/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
ask
where {
 []{ :Linköping a :City ; :in :Sweden . } .
}

(ask (bgp (graph _:node32)
          (bgp (graph <http://nngraph.org/embeddings>)
               (triple _:nodeCONTEXT-GRAPH-34
                       <http://nngraph.org/asserts>
                       _:node32))
          (triple <http://example.org/Linköping> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/City>)
          (triple <http://example.org/Linköping> <http://example.org/in> <http://example.org/Sweden>)))

{ "head": {}, "boolean": true }

another embedded graph query

prefix : <http://example.org/> 
prefix nng: <http://nngraph.org/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
select ?g
where {
 ?g { :Linköping a :City ; :in :Sweden . } .
}

(select ?g (bgp (graph ?g)
     (bgp (graph <http://nngraph.org/embeddings>)
          (triple _:nodeCONTEXT-GRAPH-36 <http://nngraph.org/asserts> ?g))
     (triple <http://example.org/Linköping> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/City>)
     (triple <http://example.org/Linköping> <http://example.org/in> <http://example.org/Sweden>)))

{ "head": { "vars": [ "g" ] },
   "results": {
   "bindings": [
 { "g": {"type":"bnode", "value":"graph-asserted-19"} } ] } }


sparql star term query

prefix : <http://example.org/> 
prefix nng: <http://nngraph.org/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
ask
where {
  << :Linköping a :City >> :source :nyt .
}

(ask (bgp (triple _:nodeGRAPH-37
                  <http://example.org/source>
                  <http://example.org/nyt>)
          (bgp (graph _:nodeGRAPH-37)
               (triple <http://example.org/Linköping> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/City>))))

{ "head": {}, "boolean": true }

import nested graph dataset - equivalent representation

@base <http://dydra.com/> .
@prefix : <http://example.org/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
 { :Linköping a :City ; :in :Sweden . } :source :nyt .

<http://example.org/Linköping> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/City> _:graph-asserted-19 .
<http://example.org/Linköping> <http://example.org/in> <http://example.org/Sweden> _:graph-asserted-19 .
<urn:dydra:default> <http://nngraph.org/asserts> _:graph-asserted-19 <http://nngraph.org/embeddings> .
<urn:dydra:default> <http://nngraph.org/asserts> _:graph-asserted-21 <http://nngraph.org/embeddings> .
<http://example.org/Linköping> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/City> _:graph-asserted-21 .
<http://example.org/Linköping> <http://example.org/in> <http://example.org/Sweden> _:graph-asserted-21 .
_:graph-asserted-19 <http://example.org/source> <http://example.org/nyt> .
_:graph-asserted-21 <http://example.org/source> <http://example.org/nyt> .

{ :Linköping a :City . } :saidBy :john .
{ :Linköping :in :Sweden . } :saidBy :john .
Q/E? 
{ :Linköping a :City ; :in :Sweden . } :saidBy :john .

two nested graphs, annotated

@base <http://dydra.com/> .
@prefix : <http://example.org/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
 { :Linköping a :City . } :saidBy :john .
 { :Linköping :in :Sweden . } :saidBy :john .

"from included" merges the nested graphs related to the default graph,
but as the graph identity if no longer present, thhere is no relation to ":saidBy john"
and without that a join with two graph instances fails as,
where the identity is retained, the graphs are distinct.

prefix : <http://example.org/> 
prefix nng: <http://nngraph.org/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
ask
from included nng:Assertion
where {
  { :Linköping a :City ; :in :Sweden . }
}

(ask (bgp (triple <http://example.org/Linköping> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/City>)
          (triple <http://example.org/Linköping> <http://example.org/in> <http://example.org/Sweden>)))

{ "head": {}, "boolean": true }
prefix : <http://example.org/> 
prefix nng: <http://nngraph.org/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
ask
from included nng:Assertion
where {
  { :Linköping a :City ; :in :Sweden . } :saidBy :john .
}

(ask (bgp (triple _:nodeFORMULA-39
                  <http://example.org/saidBy>
                  <http://example.org/john>)
          (bgp (graph _:nodeFORMULA-39)
               (triple <http://example.org/Linköping> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/City>)
               (triple <http://example.org/Linköping> <http://example.org/in> <http://example.org/Sweden>))))

{ "head": {}, "boolean": false }
prefix : <http://example.org/> 
prefix nng: <http://nngraph.org/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
ask
where {
  ?g { :Linköping a :City ; :in :Sweden . }
}

(ask (bgp (graph ?g)
          (bgp (graph <http://nngraph.org/embeddings>)
               (triple _:nodeCONTEXT-GRAPH-41 <http://nngraph.org/asserts> ?g))
          (triple <http://example.org/Linköping> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/City>)
          (triple <http://example.org/Linköping> <http://example.org/in> <http://example.org/Sweden>)))

{ "head": {}, "boolean": false }

the same applies as two statements with graph susbjects

@base <http://dydra.com/> .
@prefix : <http://example.org/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
{ :Linköping a :City . } :saidBy :john .
{ :Linköping :in :Sweden . } :saidBy :john .

{ :cat :is :alive , :dead . } :logicalStatus :inconsistent .
Q/E?
{ :cat :is :alive . } :logicalStatus :inconsistent .

import subject graph dataset

@base <http://dydra.com/> .
@prefix : <http://example.org/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
{ :cat :is :alive , :dead . } :logicalStatus :inconsistent .

<urn:dydra:default> <http://nngraph.org/asserts> _:graph-asserted-10 <http://nngraph.org/embeddings> .
<http://example.org/cat> <http://example.org/is> <http://example.org/alive> _:graph-asserted-10 .
<http://example.org/cat> <http://example.org/is> <http://example.org/dead> _:graph-asserted-10 .
_:graph-asserted-10 <http://example.org/logicalStatus> <http://example.org/inconsistent> .

subject graph query
prefix : <http://example.org/> 
prefix nng: <http://nngraph.org/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
ask
where {
  { :cat :is :alive . } :logicalStatus :inconsistent .
}

(ask (bgp (triple _:nodeFORMULA-14
                  <http://example.org/logicalStatus>
                  <http://example.org/inconsistent>)
          (bgp (graph _:nodeFORMULA-14)
               (triple <http://example.org/cat> <http://example.org/is> <http://example.org/alive>))))

{ "head": {}, "boolean": true }

import nested graph dataset

@base <http://dydra.com/> .
@prefix : <http://example.org/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
{ :cat :is :alive , :dead . } :logicalStatus :inconsistent .

<urn:dydra:default> <http://nngraph.org/asserts> _:graph-asserted-23 <http://nngraph.org/embeddings> .
<http://example.org/cat> <http://example.org/is> <http://example.org/alive> _:graph-asserted-23 .
<http://example.org/cat> <http://example.org/is> <http://example.org/dead> _:graph-asserted-23 .
_:graph-asserted-23 <http://example.org/logicalStatus> <http://example.org/inconsistent> .

nested = subject graph query
prefix : <http://example.org/> 
prefix nng: <http://nngraph.org/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
ask
where {
 { :cat :is :alive . } :logicalStatus :inconsistent .
}

(ask (bgp (triple _:nodeFORMULA-43
                  <http://example.org/logicalStatus>
                  <http://example.org/inconsistent>)
          (bgp (graph _:nodeFORMULA-43)
               (triple <http://example.org/cat> <http://example.org/is> <http://example.org/alive>))))

{ "head": {}, "boolean": true }

overconstrained query
prefix : <http://example.org/> 
prefix nng: <http://nngraph.org/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
ask
where {
{ :cat :is :alive; :is :old . } :logicalStatus :inconsistent .
}

(ask (bgp (triple _:nodeFORMULA-44
                  <http://example.org/logicalStatus>
                  <http://example.org/inconsistent>)
          (bgp (graph _:nodeFORMULA-44)
               (triple <http://example.org/cat> <http://example.org/is> <http://example.org/alive>)
               (triple <http://example.org/cat> <http://example.org/is> <http://example.org/old>))))

{ "head": {}, "boolean": false }

:geography :truths { :Linköping a :City .
                   :City rdfs:subClassOf :Location . }
Q/E?
:geography :truths { :Linköping a :Location . }

import object graph dataset

@base <http://dydra.com/> .
@prefix : <http://example.org/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
:geography :truths { :Linköping a :City .
                     :City rdfs:subClassOf :Location . } .

<urn:dydra:default> <http://nngraph.org/asserts> _:graph-asserted-12 <http://nngraph.org/embeddings> .
<http://example.org/City> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://example.org/Location> _:graph-asserted-12 .
<http://example.org/Linköping> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/City> _:graph-asserted-12 .
<http://example.org/geography> <http://example.org/truths> _:graph-asserted-12 .
prefix : <http://example.org/> 
prefix nng: <http://nngraph.org/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
ask
where {
 :geography :truths { :Linköping a :City . :City rdfs:subClassOf :Location .}
}

(ask (bgp (triple <http://example.org/geography>
                  <http://example.org/truths>
                  _:nodeFORMULA-17)
          (bgp (graph _:nodeFORMULA-17)
               (triple <http://example.org/Linköping> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/City>)
               (triple <http://example.org/City> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://example.org/Location>))))

{ "head": {}, "boolean": true }
prefix : <http://example.org/> 
prefix nng: <http://nngraph.org/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
ask
where {
 :geography :truths { :Linköping a :City . }
}

(ask (bgp (triple <http://example.org/geography>
                  <http://example.org/truths>
                  _:nodeFORMULA-18)
          (bgp (graph _:nodeFORMULA-18)
               (triple <http://example.org/Linköping> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/City>))))

{ "head": {}, "boolean": true }
prefix : <http://example.org/> 
prefix nng: <http://nngraph.org/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
ask
where {
 :geography :truths { :City rdfs:subClassOf :Location . }
}

(ask (bgp (triple <http://example.org/geography>
                  <http://example.org/truths>
                  _:nodeFORMULA-19)
          (bgp (graph _:nodeFORMULA-19)
               (triple <http://example.org/City> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://example.org/Location>))))

{ "head": {}, "boolean": true }
prefix : <http://example.org/> 
prefix nng: <http://nngraph.org/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
ask
where {
 :geography :truths { :Linköping a/rdfs:subClassOf :Location . }
}

(ask (bgp (triple <http://example.org/geography>
                  <http://example.org/truths>
                  _:nodeFORMULA-20)
          (bgp (graph _:nodeFORMULA-20)
               (triple <http://example.org/Linköping>
                       (<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>/<http://www.w3.org/2000/01/rdf-schema#subClassOf>)
                       <http://example.org/Location>))))

{ "head": {}, "boolean": true }
prefix : <http://example.org/> 
prefix nng: <http://nngraph.org/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
ask
where {
 :geography :truths { :Linköping a/rdfs:subClassOf* :Location . }
}

(ask (bgp (triple <http://example.org/geography>
                  <http://example.org/truths>
                  _:nodeFORMULA-21)
          (bgp (graph _:nodeFORMULA-21)
               (triple <http://example.org/Linköping>
                       (<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>/<http://www.w3.org/2000/01/rdf-schema#subClassOf>*)
                       <http://example.org/Location>))))

{ "head": {}, "boolean": false }
prefix : <http://example.org/> 
prefix nng: <http://nngraph.org/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
ask
from <urn:dydra:all>
where {
  :Linköping a/rdfs:subClassOf* :Location .
}

(ask (bgp (triple <http://example.org/Linköping>
                  (<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>/<http://www.w3.org/2000/01/rdf-schema#subClassOf>*)
                  <http://example.org/Location>)))

{ "head": {}, "boolean": true }
prefix : <http://example.org/> 
prefix nng: <http://nngraph.org/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
select *
where {
  graph ?graph { :Linköping a/rdfs:subClassOf* :Location .  }
}

(select ?graph (graph ?graph
       (bgp (triple <http://example.org/Linköping>
                    (<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>/<http://www.w3.org/2000/01/rdf-schema#subClassOf>*)
                    <http://example.org/Location>))))

{ "head": { "vars": [ "graph" ] },
   "results": {
   "bindings": [
 { "graph": {"type":"uri", "value":"urn:dydra:named"} } ] } }

