// adapted from the trig 1.2 bnf
// https://www.w3.org/TR/rdf12-trig/
// - adds formulae as alternative to quoted triples for subject and object
// - adds referenced / transcluded graphs
// - adds literal graph terms: subject and object

[[1]]	trigDoc		::=	trigElement *
[[1a]]	trigElement	::=	directive | topLevelBlocks
[[2]]	topLevelBlocks	::=	( topLevelTriples | topLevelGraph )  topLevelBlocks?
[[2a]]	topLevelTriples	::=	( subject predicateObjectList '.' ) | ( blankNodePropertyList  predicateObjectList? '.' )
[[2b]]	topLevelGraph	::=	label? graph '.'
[[3]]	constituentBlocks	::=	( constituentTriples | constituentGraph ) constituentBlocks?
[[3a]]	constituentTriples	::=	( subject predicateObjectList '.' ) | ( blankNodePropertyList predicateObjectList? '.' )
[[3b]]	constituentGraph	::=	label? graph '.'

[[5a]]	graph		::=	assertedGraph | quotedGraph | recordedGraph | reportedGraph | literalGraph
[[5]]	termGraph	::=	assertedTermGraph | quotedTermGraph | recordedTermGraph | reportedTermGraph | literalTermGraph
[[6a1]]	assertedGraph	::=	'{' constituentBlocks '}'
[[6a2]]	assertedTermGraph	::=	'{' ( label '|' ) ? constituentBlocks '}'
[[6b1]]	literalGraph	::=	String '^^' graphDatatype
[[6b2]]	literalTermGraph	::=	String '^^' graphDatatype
[[6b3]]	graphDatatype	::=	'<' GRAPH_DATATYPE_NAMESTRING '>'
[[6c1]]	quotedGraph	::=	'<<' constituentBlocks '>>'
[[6c2]]	quotedTermGraph	::=	'<<' ( label '|' ) ? constituentBlocks '>>'
[[6d1]]	recordedGraph	::=     '{"' constituentBlocks '"}'
[[6d2]]	recordedTermGraph	::=     '{"' ( label '|' ) ? constituentBlocks '"}' // fails to parse : | ( "{'" constituentBlocks "'}" )
[[6e1]]	reportedGraph	::=     '"{' constituentBlocks '}"'
[[6e2]]	reportedTermGraph	::=     '"{' ( label '|' ) ? constituentBlocks '}"' // fails to parse : | ( "'{" constituentBlocks "}'" )
[[7]]	label		::=	iri | BlankNode | ('[' class ']' ) | ( '[' ( iri | BlankNode ) class ']' )
[[7a]]	class		::=	iri

[[8]]	directive	::=	prefixID | base | sparqlPrefix | sparqlBase
[[9]]	prefixID	::=	'@prefix' PNAME_NS IRIREF '.'
[[10]]	base		::=	'@base' IRIREF '.'
[[11]]	sparqlPrefix	::=	'PREFIX' PNAME_NS IRIREF
[[12]]	sparqlBase	::=	'BASE' IRIREF
[[14]]	predicateObjectList	::=	verb objectList (';' predicateObjectList)?
[[15]]	objectList	::=	annotatedObject (',' annotatedObject)*
[[15a]]	annotatedObject	::=	object annotation?
[[16]]	verb		::=	predicate | 'a'
// no quotedTriple [[17]]	subject	::=	'THIS' | iri | BlankNode | collection | quotedTriple | termGraph // wrappedGraph | literalGraph
[[17]]	subject		::=	'THIS' | iri | BlankNode | collection | termGraph // wrappedGraph | literalGraph
[[18]]	predicate	::=	iri | termGraph
// [[19]]	object	::=	iri | BlankNode | collection | blankNodePropertyList | literal | quotedTriple | termGraph // wrappedGraph | literalGraph
[[19]]	object		::=	iri | BlankNode | collection | blankNodePropertyList | literal | termGraph // wrappedGraph | literalGraph
[[20]]	literal		::=	RDFLiteral | NumericLiteral | BooleanLiteral
[[21]]	blankNodePropertyList	::=	'[' predicateObjectList ']'
[[22]]	collection	::=	'(' object* ')'
[[23]]	NumericLiteral	::=	INTEGER | DECIMAL | DOUBLE
[[24]]	RDFLiteral	::=	String (LANGTAG | ('^^' iri))?
[[25]]	BooleanLiteral	::=	'true' | 'false'
[[26]]	String		::=	STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
[[27]]	iri		::=	IRIREF | PrefixedName
[[28]]	PrefixedName	::=	PNAME_LN | PNAME_NS
// imported from sparql
// [29]	BlankNode	::=	BLANK_NODE_LABEL | ANON
[[29]]	BlankNode	::=	( '_:' BLANK_NODE_LABEL ) | ANON
// superceded by quotedGraph
// [[30]]	quotedTriple	::=	'<<' qtSubject predicate qtObject '>>'
// [[31]]	qtSubject	::=	iri | BlankNode | quotedTriple
// [[32]]	qtObject	::=	iri | BlankNode | literal | quotedTriple
[[33]]	annotation	::=	'{|' predicateObjectList '|}'
// imported from sparql
// [35]	IRIREF		::=	'<' ([^#x00-#x20<>'{}|^`\] | UCHAR)* '>'
[[35]]	IRIREF		::=	'<' IRI_NAMESTRING? '>'
// terminals imported from sparql
// [36]	PNAME_NS	::=	PN_PREFIX? ':'
// [37]	PNAME_LN	::=	PNAME_NS PN_LOCAL
// [38]	BLANK_NODE_LABEL	::=	'_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
// [39]	LANGTAG	::=	'@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
// [40]	INTEGER	::=	[+-]? [0-9]+
// [41]	DECIMAL	::=	[+-]? ([0-9]* '.' [0-9]+)
// [42]	DOUBLE	::=	[+-]? (([0-9]+ '.' [0-9]* EXPONENT) | ('.' [0-9]+ EXPONENT) | ([0-9]+ EXPONENT))
// [43]	EXPONENT	::=	[eE] [+-]? [0-9]+
// [44]	STRING_LITERAL_QUOTE	::=	'"' ([^#x22#x5C#x0A#x0D] | ECHAR | UCHAR)* '"'
// [45]	STRING_LITERAL_SINGLE_QUOTE	::=	"'" ([^#x27#x5C#x0A#x0D] | ECHAR | UCHAR)* "'"
// [46]	STRING_LITERAL_LONG_SINGLE_QUOTE	::=	"'''" ( ( "'" | "''" )? ( [^'\] | ECHAR ) )* "'''"
// [47]	STRING_LITERAL_LONG_QUOTE	::=	'"""' ( ( '"' | '""' )? ( [^"\] | ECHAR ) )* '"""'
// [48]	UCHAR	::=	('\u' HEX HEX HEX HEX) | ('\U' HEX HEX HEX HEX HEX HEX HEX HEX)
// [49]	ECHAR	::=	'\' [tbnrf\'']
// [50]	NIL	::=	'(' WS* ')'
// [51]	WS	::=	#x20 | #x09 | #x0D | #x0A
[[52]]	ANON	::=	'[' ']'
// [53]	PN_CHARS_BASE	::=	[A-Z] | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x02FF] | [#x0370-#x037D] | [#x037F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x00010000-#x000EFFFF]
// [54]	PN_CHARS_U	::=	PN_CHARS_BASE | '_'
// [55]	PN_CHARS	::=	PN_CHARS_U | '-' | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
// [56]	PN_PREFIX	::=	PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
// [57]	PN_LOCAL	::=	(PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
// [58]	PLX	::=	PERCENT | PN_LOCAL_ESC
// [59]	PERCENT	::=	'%' HEX HEX
// [60]	HEX	::=	[0-9] | [A-F] | [a-f]
// [61]	PN_LOCAL_ESC	::=	'\' ('_' | '~' | '.' | '-' | '!' | '$' | '&' | ''' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%')
